#!/usr/bin/bash
#version history is now in git
set -e
trap "exit 1" TERM
export TOP_PGID=$(ps --no-headers -o pgid $$ | tr -d ' ')
function helpme {
	if [[ "$1" != "" ]]
	then
		echo -e "$1" 1>&2
	else
		cat /proc/$$/fd/255 | sed -n '/^#HELPME_START/,/^#HELPME_END/p' | grep -v "^#HELPME_" | grep -e "	-\|^#" | grep -- "$(echo $OPT_SHORT | sed -e "s/://g" | sed -e "s/\(.\)/\t-\1 \\\|/g" | sed -e "s/$/^#$COMMAND\t\\\|^#[A-Z]/" )" | sed -e "s/^#$COMMAND\t/\t/; s/^#//" 1>&2
	fi
	kill -s TERM -- -$TOP_PGID
}
function need_command {
	which $1 &> /dev/null || helpme "ERR-008: missing command $1"
}

ARGLIST=$@
OPT_SHORT="hvn:Ia:s:r:k:dl:"
OPT_LONG="help,verbose,num-of-backups:incremental-only,archive-interval:,source:,removal-percentage:,keep:,updatedb,link-moved-file:"
OPTS=$(getopt -o $OPT_SHORT --long $OPT_LONG -n daisync -- "$@")
NUM=10
eval set -- "$OPTS"
while :
do
	case "$1" in
#HELPME_START
#NAME
#	daisync, an rsync-based time-machine-backup tool
#SYNOPSIS
#	daisync [OPTION]... DEST
#OPTIONS
		-h | --help)
			helpme ;;
		-v | --verbose)
			set -x
			shift ;;
		-n | --num-of-backups)	#NUM, maximum number of transient backups, default 10
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-001: invalid number: -c $2"
			NUM=$2
			shift 2 ;;
		-I | --incremental-only)	#unchanged files are in 0000 only, won't be hard linked to 0001-9999
			INCREMENTAL=YES
			shift ;;
		-a | --archive-interval)	#weekly/monthly/yearly, interval of permanent backups
			[ "$2" = "weekly" -o "$2" = "monthly" -o "$2" = "yearly" ] || helpme "ERR-002: invalid paramter: -a $2"
			ARCHIVE=$2
			shift 2 ;;
		-s | --source)	#SOURCE, such as "SERVER1:/home", "-e 'ssh -p 22' SERVER1:/home", "--exclude=*-excluded-from-daisync SERVER:/home". SOURCE is directly passed to rsync, thus it can be local, rsync:// or rsync over remote shell, including ssh and rsh. Multiple '-s' are supported, to backup some setup such as gluster storage nodes. 
			SOURCES+=("$2")
			shift 2 ;;
		-r | --removal-percentage)	#PERCENTAGE, keep removing the oldest backup until the DEST storage usage is below PERCENTAGE or there are only KEEP of backups left, see '-k' below..
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-005: invalid number: -f $2"
			REMOVE=$2
			shift 2 ;;
		-k | --keep) #KEEP, always keep KEEP of latest transient backups, if -r is specified
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-006: invalid number: -k $2"
			KEEP=$2
			shift 2 ;;
		-d | --updatedb)	#generate locate database to find file very quickly. A sample command is 'locate -d DEST/0000/.daisync-locate.db myfile'
			need_command updatedb
			UPDATEDB=yes
			shift 1 ;;
		-l | --link-moved-files)	#SIZE, link moved files if its size is greater than SIZE megabytes. needs sha512sum
			[ "$2" -eq "$2" ] 2> /dev/null || helpme "ERR-003: invalid number: -l $2"
			need_command sha512sum
			let LINK=$2 || helpme "ERR-004: -l must be followed by a positive interger"
			shift 2 ;;
		--)
			shift
			break ;;
		*)
			break ;;
#VERSION
#	20210724
#COPYRIGHT
#	Developed by Manhong Dai, https://github.com/daimh/daisync
#	Copyright Â© 2021 University of Michigan. License GPLv3+: GNU GPL version 3 or later.
#	This is free software: you are free to change and redistribute it.
#	There is NO WARRANTY, to the extent permitted by law.
#HELPME_END
	esac
done


for CMD in flock rsync fuser df
do
	need_command $CMD
done
[ ${#SOURCES[@]} -gt 0 ] || helpme "ERR-007: missing -s"
[ $# -eq 1 ] || helpme "ERR-009: DEST must be specified"
DEST=$1
[ -d "$DEST" ] || helpme "ERR-010: DEST folder '$DEST' doesn't exist"
[ -d "$DEST/0000" ] || helpme "ERR-011: '$DEST' is not a daisync directory. Or please run 'mkdir $DEST/0000' to explicitly initialize it"
[ -z "$REMOVE" -a -n "$KEEP" ] && helpme "ERR-013: -r is missing as -k is specified"
[ -n "$REMOVE" -a -z "$KEEP" ] && helpme "ERR-014: -k is missing as -r is specified"
[ ${#SOURCES[@]} -eq 1 -o "$INCREMENTAL" != "YES" ] || helpme "ERR-015: multiple -s cannot work with -I"
(
	if ! flock -n 77
	then
		fuser "$DEST/.daisync-lock"
		helpme "ERR-016: a previous daisync is still running, process id is above"
	fi
	echo "[$(date '+%F %H:%M:%S')]#daisync begin (daisync $ARGLIST)"
	if [ $NUM -gt 1 ]
	then
		((LAST=NUM-1))
		LAST=$(printf "%04d" $LAST)
	fi
	if [ ! -d "$DEST/.daisync" ] 
	then
		if [ "$INCREMENTAL" != "YES" -o ! -d "$DEST/0000" ]
		then
			mkdir "$DEST/.daisync"
		else
			mv "$DEST/0000" "$DEST/.daisync"
			mkdir "$DEST/0000"
			mv "$DEST/.daisync/.daisync-*" "$DEST/0000/" 2> /dev/null || :
		fi
	fi
	rm -f "$DEST/.daisync/.daisync-df"
	if [ "$REMOVE" != "" ]
	then
		for ((SLEEP=1; ;SLEEP++))
		do
			ps $$ &> /dev/null || break
			((CUR_DFPCT=$(df -P "$DEST" | tail -n 1 |awk '{print $5}' | sed -e "s/%//") ))
			if [ $CUR_DFPCT -ge $REMOVE ]
			then
				(( CUR_BKNUM=$( (cd $DEST && ls -d ???? .daisync 2>/dev/null ) | wc -l ) ))
				[[ $CUR_BKNUM -le $KEEP ]] && break
				LAST=$( (cd $DEST && ls -d ???? | grep -v 0000) | sort -r | head -n 1 )
				if [ -n "$LAST" ]
				then
					echo "[$(date '+%F %H:%M:%S')]#daisync removing $LAST"
					rm -rf "$DEST/$LAST" 
					continue
				fi
			elif [ ! -d "$DEST/.daisync" ]
			then
				break
			fi
			if [ $SLEEP -gt 60 ] 
			then
				sleep 60
			else
				sleep $SLEEP
			fi
		done
	fi &
	mapfile -t SOURCES < <(shuf -e -- "${SOURCES[@]}")
	for SRC in "${SOURCES[@]}"
	do
		if [ "$INCREMENTAL" = "YES" ]
		then
			PARAMS="-ab --backup-dir=../0000"
		else
			PARAMS="-a --link-dest=../0000"
		fi
		[ ${#SOURCES[@]} -eq 1 ] && PARAMS="$PARAMS --delete"
		[ -f "$DEST/.daisync-exclude-from" ] && PARAMS="$PARAMS --exclude-from=$DEST/.daisync-exclude-from"
		echo "[$(date '+%F %H:%M:%S')]#rsync $PARAMS \"$SRC\" \"$DEST/.daisync\""
		set +e
		bash -c "rsync $PARAMS $SRC \"$DEST/.daisync\""
		RSYNC_RTN=$?
		[ $RSYNC_RTN -eq 0 -o $RSYNC_RTN -eq 24 ] || helpme "ERR-012: rsync '$SRC' failed with code $RSYNC_RTN"
		set -e
	done
	if [ "$LINK" != "" ]
	then
		echo "[$(date '+%F %H:%M:%S')]#relinking moved files that is greater than $LINK MB"
		find "$DEST/.daisync" -type f -size +${LINK}M -links 1 -print0 | while read -d $'\0' FNEW
		do
			HASH=$(sha512sum "$FNEW" |cut -c 1-128)
			read STATU STATG STATS STATY < <(stat -c "%u %g %s %Y" "$FNEW")
			find "$DEST/0000" -type f -uid $STATU -gid $STATG -size ${STATS}c -exec bash -c "
				if [ \"$HASH\" = \"\$(sha512sum \"{}\" |cut -c 1-128)\" -a \"\$(stat -c %Y \"{}\")\" = \"$STATY\" ]
				then
					echo \"[\$(date '+%F %H:%M:%S')]#linking: '{}'\" \"to\" \"'$FNEW'\"
					ln -f \"{}\" '$FNEW'
				else
					exit 1
				fi" \; -quit
		done
	fi
	if [ "$UPDATEDB" = "yes" ]
	then
		echo "[$(date '+%F %H:%M:%S')]#create locate database"
		updatedb -l no -o "$DEST/.daisync/.daisync-locate.db" -U "$(realpath "$DEST/.daisync")"
		chmod 400 "$DEST/.daisync/.daisync-locate.db"
	fi
	df -Pm "$DEST" > "$DEST/.daisync/.daisync-df"
	((NUM--))
	for IDX in $(seq -f %04g $NUM -1 0)
	do
		if [ -d "$DEST/$IDX" ]
		then
			if [ "$IDX" = "$(printf "%04d" $NUM)" ]
			then
				rm -rf "$DEST/$IDX"
			else
				mv "$DEST/$IDX" "$DEST/$PREV"
			fi
		fi
		PREV=$IDX
	done
	mv "$DEST/.daisync" "$DEST/0000"
	wait
	
	if [ "$ARCHIVE" != "" ]
	then
		(( NOW=$(date +%s) ))
		if [ "$ARCHIVE" = "weekly" ]
		then
			(( OFFSET=$(date --date="@$NOW" +%w) ))
			(( START=$NOW - $OFFSET * 3600 * 24 ))
		elif [ "$ARCHIVE" = "monthly" ]
		then
			(( OFFSET=$(date --date="@$NOW" +%_d) ))
			(( OFFSET-- ))
			(( START=$NOW - $OFFSET * 3600 * 24 ))
		elif [ "$ARCHIVE" = "yearly" ]
		then
			(( OFFSET=$(date --date="@$NOW" +%_j) ))
			(( OFFSET-- ))
			(( START=$NOW - $OFFSET * 3600 * 24 ))
		fi
		HAS_ARCHIVE=NO
		for ((DT=$START; DT<=$NOW; DT+=3600 * 24))
		do
			DAY=$(date --date="@$DT" +%F)
			if ls "$DEST"/$DAY-??-??-?? &> /dev/null
			then
				HAS_ARCHIVE=YES
				break
			fi
		done
		if [ "$HAS_ARCHIVE" = "NO" ]
		then
			NOW=$(date --date="@$NOW" +%F-%H-%M-%S)
			echo "[$(date '+%F %H:%M:%S')]#creating $ARCHIVE archive"
			echo $NOW > "$DEST/0000/.daisync-archived"
			if [ "$INCREMENTAL" = "YES" ]
			then
				cp -apr "$DEST/0000" "$DEST/$NOW"
			else
				cp -aprl "$DEST/0000" "$DEST/$NOW"
			fi
		fi
	fi
	echo "[$(date '+%F %H:%M:%S')]#daisync end"
) 77> "$DEST/.daisync-lock" 2>&1 | tee "$DEST/.daisync-log.$$"
RTN=$?
if [ $RTN -eq 0 ]
then 
	mv "$DEST/.daisync-log.$$" "$DEST/0000/.daisync-log"
	[ -f "$DEST/0000/.daisync-archived" ] && ln "$DEST/0000/.daisync-log" "$DEST/$(cat "$DEST/0000/.daisync-archived")/"
fi
exit $RTN
