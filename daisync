#!/usr/bin/env bash
set -Eeuo pipefail
trap "exit 1" TERM
function helpme {
	if [ $# -gt 0 ]
	then
		echo -e "$1" 1>&2
	else
		grep '#' /proc/$$/fd/255 | sed -n '/^#HELPME_START/,/^#HELPME_END/p' | grep -v "^#HELPME_" | sed -e "s/#//" | tr -s '\t' 1>&2 #20220612
	fi
	kill -s TERM -- -$(cut -d ' ' -f 5 /proc/$$/stat)
}
function hash_command {
	hash $1 &> /dev/null || helpme "ERR-008: missing command $1"
}
ArchiveFreq=""
CloneStyle=hardlink
Keep=""
Num=10
Remove=""
Updatedb=NO
ArgList=$@
OptShort="hvn:c:a:s:r:k:d"
OptLong="help,version,num-of-backups:clone-style:,archive:,source:,removal-percentage:,keep:,updatedb"
Opts=$(getopt -o $OptShort --long $OptLong -n daisync -- "$@")
eval set -- "$Opts"
while [ $# -gt 0 ]
do
	case "$1" in
#HELPME_START
#NAME
#	daisync, a time-machine backup tool
#EXAMPLE
#	mkdir -p backup1/0000; daisync -c reflink -s someone@localhost:dir1/ backup1
#	mkdir -p backup2/0000; daisync -s someone@localhost:"dir1\ dir2" backup2
#SYNOPSIS
#	daisync [OPTION]... DEST
#DESCRIPTION
		-h | --help) #print help information
			helpme ;;
		--version) #print version information
			helpme "20220828" ;;
		-v )	#verbose output
			set -x
			shift ;;
		-n | --num-of-backups)	#NUM, maximum number of transient backups, default 10
			let Num=$2 || helpme "ERR-001: invalid number for -n: $2"
			shift 2 ;;
		-c | --clone-style)	#hardlink/reflink/none. Default is 'hardlink', unchanged files are hard-linked across all backups. With 'reflink', 'cp --reflink' are used prior to 'rsync', which doesn't support reflink yet as of 20020326. With 'none', unchanged files are not cloned and are only in 0000
			CloneStyle=$2
			shift 2 ;;
		-a | --archive)	#weekly/monthly/yearly, interval of permanent backups
			[ "$2" = "weekly" -o "$2" = "monthly" -o "$2" = "yearly" ] || helpme "ERR-002: invalid paramter: -a $2"
			ArchiveFreq=$2
			shift 2 ;;
		-s | --source)	#SOURCE, such as "SERVER1:/home", "-e 'ssh -p 22' SERVER1:/home", "--exclude=*-excluded-from-daisync SERVER:/home". SOURCE is directly passed to rsync, can be local, rsync:// or rsync over remote shell, including ssh and rsh. Multiple '-s' are supported to backup some setup such as gluster storage nodes
			Sources+=("$2")
			shift 2 ;;
		-r | --removal-percentage)	#PERCENTAGE, see '-k' below
			let Remove=$2 || helpme "ERR-005: invalid number for -r: $2"
			shift 2 ;;
		-k | --keep) #KEEP, keep removing the oldest transient backup until the DEST storage usage is below PERCENTAGE or there are only KEEP of backups left
			let Keep=$2 || helpme "ERR-006: invalid number for -k: $2"
			shift 2 ;;
		-d | --updatedb)	#generate locate database to find file very quickly. A sample command of finding file is 'locate -d DEST/0000/.daisync-locate.db myfile'
			hash_command updatedb
			Updatedb=YES
			shift 1 ;;
		--)
			shift
			break ;;
		*)
			break ;;
#AUTHOR
#	Manhong Dai, MNI, U of Michigan
#COPYRIGHT
#	Copyright Â© 2002-2022 University of Michigan. License GPLv3+: GNU
#	GPL version 3 or later <https://gnu.org/licenses/gpl.html>.
#	This is free software: you are free to change and redistribute it.
#	There is NO WARRANTY, to the extent permitted by law.
#HELPME_END
	esac
done

Link="/usr/bin/cp -a"
if [ "$CloneStyle" = "hardlink" ]
then
	Link="${Link}l"
elif [ "$CloneStyle" = "reflink" ]
then
	Link="${Link} --reflink=always"
elif [ "$CloneStyle" != "none" ] 
then
	helpme "ERR-016: invalid parameter for -c: $2"
fi
for Cmd in flock rsync fuser df
do
	hash_command $Cmd
done
set +u
[ ${#Sources[@]} -gt 0 ] || helpme "ERR-007: missing -s"
set -u
[ $# -eq 1 ] || helpme "ERR-009: missing DEST"
Dest=$1
[ -d "$Dest" ] || helpme "ERR-010: no such a directory '$Dest'"
[ -d "$Dest/0000" ] || helpme "ERR-011: run 'mkdir -p $Dest/0000' to explicitly initialize \"$Dest\" as a daisync directory"
[ -z "$Remove" -a -z "$Keep" ] || [ -n "$Remove" -a -n "$Keep" ] || helpme "ERR-013: -k and -r need be used together"
[ ${#Sources[@]} -eq 1 -o "$CloneStyle" = "hardlink" ] || helpme "ERR-014: multiple -s can work with '-c hardlink' only"
(
	if ! flock -n 77
	then
		fuser "$Dest/.daisync-lock"
		helpme "ERR-015: a daisync is still running, process id is above"
	fi
	echo "[$(date '+%F %H:%M:%S')]#daisync begin (daisync $ArgList)"
	if [ $Num -gt 1 ]
	then
		((Last=Num-1))
		Last=$(printf "%04d" $Last)
	fi
	if [ ! -d "$Dest/.daisync" ]
	then
		if [ "$CloneStyle" = "none" ]
		then
			mv "$Dest/0000" "$Dest/.daisync"
			mkdir "$Dest/0000"
			mv "$Dest/.daisync/.daisync-*" "$Dest/0000/" 2> /dev/null || :
		elif [ "$CloneStyle" = "hardlink" ]
		then
			mkdir "$Dest/.daisync"
		elif [ "$CloneStyle" = "reflink" ]
		then
			touch -a "$Dest/0000/.daisync-log"
			mkdir -p "$Dest/.daisync-reflink"
			if ! cp -a --reflink=always "$Dest/0000/.daisync-log" "$Dest/.daisync-reflink"
			then
				rm -r "$Dest/.daisync-reflink"
				helpme "ERR-017: \"$Dest\" doesn't support reflink. Try the latest version of xfs, btrfs, cifs, nfs 4.2, etc."
			fi
			cp -au --reflink=always "$Dest/0000/." "$Dest/.daisync-reflink"
			mv "$Dest/.daisync-reflink" "$Dest/.daisync"
		else
			helpme "ERR-018"
		fi
	fi
	rm -f "$Dest/.daisync/.daisync-df"
	if [ "$Remove" != "" ]
	then
		for ((Sleep=1; ;Sleep++))
		do
			ps $$ &> /dev/null || break
			((CurDfPct=$(df -P "$Dest" | tail -n 1 |awk '{print $5}' | sed -e "s/%//") ))
			if [ $CurDfPct -ge $Remove ]
			then
				(( CurBkNum=$( (cd $Dest && ls -d ???? .daisync 2>/dev/null ) | wc -l ) ))
				[[ $CurBkNum -le $Keep ]] && break
				Last=$( (cd $Dest && ls -d ???? | grep -v 0000) | sort -r | head -n 1 )
				if [ -n "$Last" ]
				then
					echo "[$(date '+%F %H:%M:%S')]#daisync removing $Last"
					rm -rf "$Dest/$Last"
					continue
				fi
			elif [ ! -d "$Dest/.daisync" ]
			then
				break
			fi
			if [ $Sleep -gt 60 ]
			then
				sleep 60
			else
				sleep $Sleep
			fi
		done
	fi &
	mapfile -t Sources < <(shuf -e -- "${Sources[@]}")
	for Src in "${Sources[@]}"
	do
		if [ "$CloneStyle" = "none" ]
		then
			Params="-ab --backup-dir=../0000"
		elif [ "$CloneStyle" = "hardlink" ]
		then
			Params="-a --link-dest=../0000"
		else
			Params="-a"
		fi
		[ ${#Sources[@]} -eq 1 ] && Params="$Params --delete"
		[ -f "$Dest/.daisync-exclude-from" ] && Params="$Params --exclude-from=$Dest/.daisync-exclude-from"
		echo "[$(date '+%F %H:%M:%S')]#rsync $Params \"$Src\" \"$Dest/.daisync\""
		set +e
		bash -c "rsync $Params $Src \"$Dest/.daisync\""
		RsyncRtn=$?
		set -e
		[ $RsyncRtn -eq 0 -o $RsyncRtn -eq 24 ] || helpme "ERR-012: rsync '$Src' failed with code $RsyncRtn"
	done
	if [ "$Updatedb" = "YES" ]
	then
		echo "[$(date '+%F %H:%M:%S')]#create locate database"
		updatedb -l no -o "$Dest/.daisync/.daisync-locate.db" -U "$(realpath "$Dest/.daisync")"
		chmod 400 "$Dest/.daisync/.daisync-locate.db"
	fi
	df -Pm "$Dest" > "$Dest/.daisync/.daisync-df"
	((Num--))
	for Idx in $(seq -f %04g $Num -1 0)
	do
		if [ -d "$Dest/$Idx" ]
		then
			if [ "$Idx" = "$(printf "%04d" $Num)" ]
			then
				rm -rf "$Dest/$Idx"
			else
				mv "$Dest/$Idx" "$Dest/$Prev"
			fi
		fi
		Prev=$Idx
	done
	mv "$Dest/.daisync" "$Dest/0000"
	ln -f "$Dest/.daisync-log.$$" "$Dest/0000/.daisync-log"
	wait
	if [ "$ArchiveFreq" != "" ]
	then
		(( Now=$(date +%s) ))
		if [ "$ArchiveFreq" = "weekly" ]
		then
			(( Offset=$(date --date="@$Now" +%w) ))
			(( Start=$Now - $Offset * 3600 * 24 ))
		elif [ "$ArchiveFreq" = "monthly" ]
		then
			(( Offset=$(date --date="@$Now" +%_d) ))
			(( Offset-- ))
			(( Start=$Now - $Offset * 3600 * 24 ))
		elif [ "$ArchiveFreq" = "yearly" ]
		then
			(( Offset=$(date --date="@$Now" +%_j) ))
			(( Offset-- ))
			(( Start=$Now - $Offset * 3600 * 24 ))
		fi
		ArchiveExists=NO
		for ((Dt=$Start; Dt<=$Now; Dt+=3600 * 24))
		do
			Day=$(date --date="@$Dt" +%F)
			if ls "$Dest"/$Day-??-??-?? &> /dev/null
			then
				ArchiveExists=YES
				break
			fi
		done
		if [ "$ArchiveExists" = "NO" ]
		then
			Now=$(date --date="@$Now" +%F-%H-%M-%S)
			echo "[$(date '+%F %H:%M:%S')]#creating $ArchiveFreq archive"
			echo $Now > "$Dest/0000/.daisync-archived"
			$Link "$Dest/0000/." "$Dest/$Now"
		fi
	fi
	echo "[$(date '+%F %H:%M:%S')]#daisync end"
) 77> "$Dest/.daisync-lock" 2>&1 | tee "$Dest/.daisync-log.$$"
Rtn=$?
if [ $Rtn -eq 0 ]
then
	rm "$Dest/.daisync-log.$$"
	if [ -f "$Dest/0000/.daisync-archived" ] 
	then
		rm "$Dest/$(cat "$Dest/0000/.daisync-archived")/.daisync-log"
		$Link "$Dest/0000/.daisync-log" "$Dest/$(cat "$Dest/0000/.daisync-archived")/"
	fi
fi
exit $Rtn
